"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-masonry-css";
exports.ids = ["vendor-chunks/react-masonry-css"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-masonry-css/dist/react-masonry-css.module.js":
/*!*************************************************************************!*\
  !*** ./node_modules/react-masonry-css/dist/react-masonry-css.module.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\nfunction _objectWithoutProperties(source, excluded) {\n    if (source == null) return {};\n    var target = _objectWithoutPropertiesLoose(source, excluded);\n    var key, i;\n    if (Object.getOwnPropertySymbols) {\n        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n        for(i = 0; i < sourceSymbolKeys.length; i++){\n            key = sourceSymbolKeys[i];\n            if (excluded.indexOf(key) >= 0) continue;\n            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n            target[key] = source[key];\n        }\n    }\n    return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n    if (source == null) return {};\n    var target = {};\n    var sourceKeys = Object.keys(source);\n    var key, i;\n    for(i = 0; i < sourceKeys.length; i++){\n        key = sourceKeys[i];\n        if (excluded.indexOf(key) >= 0) continue;\n        target[key] = source[key];\n    }\n    return target;\n}\nfunction _extends() {\n    _extends = Object.assign || function(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source){\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        });\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys(Object(source), true).forEach(function(key) {\n                _defineProperty(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys(Object(source)).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nconst defaultProps = {\n    breakpointCols: undefined,\n    // optional, number or object { default: number, [key: number]: number }\n    className: undefined,\n    // required, string\n    columnClassName: undefined,\n    // optional, string\n    // Any React children. Typically an array of JSX items\n    children: undefined,\n    // Custom attributes, however it is advised against\n    // using these to prevent unintended issues and future conflicts\n    // ...any other attribute, will be added to the container\n    columnAttrs: undefined,\n    // object, added to the columns\n    // Deprecated props\n    // The column property is deprecated.\n    // It is an alias of the `columnAttrs` property\n    column: undefined\n};\nconst DEFAULT_COLUMNS = 2;\nclass Masonry extends (react__WEBPACK_IMPORTED_MODULE_0___default().Component) {\n    constructor(props){\n        super(props); // Correct scope for when methods are accessed externally\n        this.reCalculateColumnCount = this.reCalculateColumnCount.bind(this);\n        this.reCalculateColumnCountDebounce = this.reCalculateColumnCountDebounce.bind(this); // default state\n        let columnCount;\n        if (this.props.breakpointCols && this.props.breakpointCols.default) {\n            columnCount = this.props.breakpointCols.default;\n        } else {\n            columnCount = parseInt(this.props.breakpointCols) || DEFAULT_COLUMNS;\n        }\n        this.state = {\n            columnCount\n        };\n    }\n    componentDidMount() {\n        this.reCalculateColumnCount(); // window may not be available in some environments\n        if (window) {\n            window.addEventListener('resize', this.reCalculateColumnCountDebounce);\n        }\n    }\n    componentDidUpdate() {\n        this.reCalculateColumnCount();\n    }\n    componentWillUnmount() {\n        if (window) {\n            window.removeEventListener('resize', this.reCalculateColumnCountDebounce);\n        }\n    }\n    reCalculateColumnCountDebounce() {\n        if (!window || !window.requestAnimationFrame) {\n            // IE10+\n            this.reCalculateColumnCount();\n            return;\n        }\n        if (window.cancelAnimationFrame) {\n            // IE10+\n            window.cancelAnimationFrame(this._lastRecalculateAnimationFrame);\n        }\n        this._lastRecalculateAnimationFrame = window.requestAnimationFrame(()=>{\n            this.reCalculateColumnCount();\n        });\n    }\n    reCalculateColumnCount() {\n        const windowWidth = window && window.innerWidth || Infinity;\n        let breakpointColsObject = this.props.breakpointCols; // Allow passing a single number to `breakpointCols` instead of an object\n        if (typeof breakpointColsObject !== 'object') {\n            breakpointColsObject = {\n                default: parseInt(breakpointColsObject) || DEFAULT_COLUMNS\n            };\n        }\n        let matchedBreakpoint = Infinity;\n        let columns = breakpointColsObject.default || DEFAULT_COLUMNS;\n        for(let breakpoint in breakpointColsObject){\n            const optBreakpoint = parseInt(breakpoint);\n            const isCurrentBreakpoint = optBreakpoint > 0 && windowWidth <= optBreakpoint;\n            if (isCurrentBreakpoint && optBreakpoint < matchedBreakpoint) {\n                matchedBreakpoint = optBreakpoint;\n                columns = breakpointColsObject[breakpoint];\n            }\n        }\n        columns = Math.max(1, parseInt(columns) || 1);\n        if (this.state.columnCount !== columns) {\n            this.setState({\n                columnCount: columns\n            });\n        }\n    }\n    itemsInColumns() {\n        const currentColumnCount = this.state.columnCount;\n        const itemsInColumns = new Array(currentColumnCount); // Force children to be handled as an array\n        const items = react__WEBPACK_IMPORTED_MODULE_0___default().Children.toArray(this.props.children);\n        for(let i = 0; i < items.length; i++){\n            const columnIndex = i % currentColumnCount;\n            if (!itemsInColumns[columnIndex]) {\n                itemsInColumns[columnIndex] = [];\n            }\n            itemsInColumns[columnIndex].push(items[i]);\n        }\n        return itemsInColumns;\n    }\n    renderColumns() {\n        const { column, columnAttrs = {}, columnClassName } = this.props;\n        const childrenInColumns = this.itemsInColumns();\n        const columnWidth = `${100 / childrenInColumns.length}%`;\n        let className = columnClassName;\n        if (className && typeof className !== 'string') {\n            this.logDeprecated('The property \"columnClassName\" requires a string'); // This is a deprecated default and will be removed soon.\n            if (typeof className === 'undefined') {\n                className = 'my-masonry-grid_column';\n            }\n        }\n        const columnAttributes = _objectSpread(_objectSpread(_objectSpread({}, column), columnAttrs), {}, {\n            style: _objectSpread(_objectSpread({}, columnAttrs.style), {}, {\n                width: columnWidth\n            }),\n            className\n        });\n        return childrenInColumns.map((items, i)=>{\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", _extends({}, columnAttributes, {\n                key: i\n            }), items);\n        });\n    }\n    logDeprecated(message) {\n        console.error('[Masonry]', message);\n    }\n    render() {\n        const _this$props = this.props, { // ignored\n        children, breakpointCols, columnClassName, columnAttrs, column, // used\n        className } = _this$props, rest = _objectWithoutProperties(_this$props, [\n            \"children\",\n            \"breakpointCols\",\n            \"columnClassName\",\n            \"columnAttrs\",\n            \"column\",\n            \"className\"\n        ]);\n        let classNameOutput = className;\n        if (typeof className !== 'string') {\n            this.logDeprecated('The property \"className\" requires a string'); // This is a deprecated default and will be removed soon.\n            if (typeof className === 'undefined') {\n                classNameOutput = 'my-masonry-grid';\n            }\n        }\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", _extends({}, rest, {\n            className: classNameOutput\n        }), this.renderColumns());\n    }\n}\nMasonry.defaultProps = defaultProps;\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Masonry);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-masonry-css/dist/react-masonry-css.module.js\n");

/***/ })

};
;